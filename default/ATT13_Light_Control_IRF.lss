
ATT13_Light_Control_IRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000110  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004a  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000ec  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bb  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000154  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c9  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a4 36       	cpi	r26, 0x64	; 100
  28:	b1 07       	cpc	r27, r17
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	20 d0       	rcall	.+64     	; 0x6e <main>
  2e:	34 c0       	rjmp	.+104    	; 0x98 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <ADC_Init>:
// внутренний опорник
//	ADMUX |= 1<<REFS0|1<<MUX0;
	//ADMUX |= 1<<REFS0|1<<MUX1;

// Vcc как опора
	ADMUX |= 1<<MUX1;
  32:	39 9a       	sbi	0x07, 1	; 7
//	ADCSRA |= 1<<ADEN|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADSC;
//	ADCSRA |= 1<<ADEN|1<<ADPS1;

	//27.05.2016 Не работает АЦП пробуем понизить частоту преобразования
//	ADCSRA |= 1<<ADEN|1<<ADPS2; // f0/16  = 500kHz
	ADCSRA |= 1<<ADEN|1<<ADPS2|1<<ADPS0; // f0/32  = 250kHz
  34:	86 b1       	in	r24, 0x06	; 6
  36:	85 68       	ori	r24, 0x85	; 133
  38:	86 b9       	out	0x06, r24	; 6
	//DDRC |= 1<<PC2; 	
/*	ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
	ADCSRA |= _BV(ADSC); // начало преобразований
*/	

}
  3a:	08 95       	ret

0000003c <ADC_Result>:


void ADC_Result(void)
{
	do{
		ADCSRA |=1<<ADSC;
  3c:	36 9a       	sbi	0x06, 6	; 6
	}

	while ((ADCSRA &(1<<ADIF)) ==0x00); // ждем окончания измерения
  3e:	34 9b       	sbis	0x06, 4	; 6
  40:	fd cf       	rjmp	.-6      	; 0x3c <ADC_Result>
	
	
	result = (ADCL|ADCH<<8);
  42:	24 b1       	in	r18, 0x04	; 4
  44:	45 b1       	in	r20, 0x05	; 5
  46:	94 2f       	mov	r25, r20
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	82 2b       	or	r24, r18
  4e:	93 2b       	or	r25, r19
  50:	90 93 61 00 	sts	0x0061, r25
  54:	80 93 60 00 	sts	0x0060, r24

	OCR0A = (result>>2)-1; // результат/4 пишем в регистр таймера
  58:	80 91 60 00 	lds	r24, 0x0060
  5c:	90 91 61 00 	lds	r25, 0x0061
  60:	96 95       	lsr	r25
  62:	87 95       	ror	r24
  64:	96 95       	lsr	r25
  66:	87 95       	ror	r24
  68:	81 50       	subi	r24, 0x01	; 1
  6a:	86 bf       	out	0x36, r24	; 54

}
  6c:	08 95       	ret

0000006e <main>:


int main(void)
{

	TCCR0A |= (0<<WGM01)|(1<<WGM00)|(1<<COM0A1)|(0<<COM0A0);
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	81 68       	ori	r24, 0x81	; 129
  72:	8f bd       	out	0x2f, r24	; 47

	//TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0); // так (Fast PWM)
	// TCCR0A |= (0<<WGM01)|(1<<WGM00)|(1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0);  // либо так (PhaseCorrect PWM)

	TCCR0B |= 0<<CS02|0<<CS01|1<<CS00;// херачим на полной частоте
  74:	83 b7       	in	r24, 0x33	; 51
  76:	81 60       	ori	r24, 0x01	; 1
  78:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0;
  7a:	16 be       	out	0x36, r1	; 54
	OCR0B = 0;
  7c:	19 bc       	out	0x29, r1	; 41
	TCNT0 = 0;
  7e:	12 be       	out	0x32, r1	; 50
	TIMSK0 = 0;
  80:	19 be       	out	0x39, r1	; 57

	sei();
  82:	78 94       	sei




	PORTB = 0b00010011; 
  84:	83 e1       	ldi	r24, 0x13	; 19
  86:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b00000001; 
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	87 bb       	out	0x17, r24	; 23
// внутренний опорник
//	ADMUX |= 1<<REFS0|1<<MUX0;
	//ADMUX |= 1<<REFS0|1<<MUX1;

// Vcc как опора
	ADMUX |= 1<<MUX1;
  8c:	39 9a       	sbi	0x07, 1	; 7
//	ADCSRA |= 1<<ADEN|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADSC;
//	ADCSRA |= 1<<ADEN|1<<ADPS1;

	//27.05.2016 Не работает АЦП пробуем понизить частоту преобразования
//	ADCSRA |= 1<<ADEN|1<<ADPS2; // f0/16  = 500kHz
	ADCSRA |= 1<<ADEN|1<<ADPS2|1<<ADPS0; // f0/32  = 250kHz
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	85 68       	ori	r24, 0x85	; 133
  92:	86 b9       	out	0x06, r24	; 6
ADC_Init();

	while(1)
	{
	
		ADC_Result();
  94:	d3 df       	rcall	.-90     	; 0x3c <ADC_Result>
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x26>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
